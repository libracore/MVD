swagger: '2.0'
info:
  version: 1.0.0
  title: MVD API
  description: API for member authentication and password reset.
host: test-libracore.mieterverband.ch
basePath: /api/method
schemes:
  - https
paths:
  /mvd.mvd.v2.web_auth.login:
    get:
      summary: Login
      description: Authenticate members using their member number or email and password.
      parameters:
        - name: user
          in: query
          description: Member number or email address
          required: true
          type: string
          x-example: MV00000085
        - name: pwd
          in: query
          description: Password as hash or plaintext (urlencoded) if 'clear' is used
          required: true
          type: string
          x-example: '%C3%BCbles_Passowrt%3F'
        - name: clear
          in: query
          description: If present, password is expected in plaintext
          required: false
          type: string
          x-example: true
      responses:
        '200':
          description: Erfolg
        '401':
          description: Passwort falsch
        '409':
          description: E-Mail mehrfach vorhanden
        '500':
          description: Internal Server Error
  /mvd.mvd.v2.web_auth.reset:
    get:
      summary: Password Reset
      description: Request a password reset link or perform a password reset.
      parameters:
        - name: user
          in: query
          description: Member number or email address
          required: true
          type: string
          x-example: MV00000085
        - name: reset_hash
          in: query
          description: Reset hash for password reset
          required: false
          type: string
          x-example: 0i7Ma0EjpVgKy4gmTra1Usagbg59MDV2
        - name: pwd
          in: query
          description: New password as hash or plaintext if 'clear' is used
          required: false
          type: string
          x-example: hi(ngua9ieR5
        - name: clear
          in: query
          description: If present, password is expected in plaintext
          required: false
          type: string
          x-example: true
      responses:
        '200':
          description: Erfolg
        '404':
          description: User not found
        '422':
          description: Schwaches Passwort
        '498':
          description: Invalid reset hash
        '500':
          description: Internal Server Error
  /mvd.mvd.v2.api.get_data_sektionen:
    get:
      summary: Get Data Sektionen
      description: |
        Returns a list of all valid "Sektionen" (sections), all values of DocType Sektion (incl. variables for ProcessWire, prefixed with pw_) and their associated membership items (in all_items).
        Excludes pseudo sections and the 'M+W-Abo' section.
        Return also ASLOCA sections. These start with AS. MVD Sections start with MV.
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              sektionen:
                type: array
                items:
                  type: object
                  properties:
                    sektion:
                      type: string
                      description: Name of the Sektion
                    doctype_sektion:
                      type: object
                      description: All fields from the DocType Sektion
                    all_items:
                      type: object
                      description: Alle Item-Details aus dem Doctype Sektion mit Artielnummer (name), Beschreibung (description) und Preis (rate). Der `field_name` die Bezeichnung im DocType Sektion.
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        rate:
                          type: number
                          format: float
                        field_name:
                          type: string
        '403':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /mvd.mvd.v2.api.get_member_annual_invoices:
    get:
      summary: Get Member Annual Invoice
      description: Returns a list of annual membership invoices for a given membership ID.
      parameters:
        - name: id
          in: query
          description: ID of the membership (mv_mitgliedschaft)
          required: true
          type: string
          x-example: 435090
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              type: object
              properties:
                mitgliedschafts_jahr:
                  type: integer
                grand_total:
                  type: number
                  format: float
                due_date:
                  type: string
                  format: date
                status:
                  type: string
                payment_reminder_level:
                  type: integer
                outstanding_amount:
                  type: number
                  format: float
                pdf_link:
                  type: string
                  description: PDF link to the invoice (null if status is'Paid')
        '404':
          description: Membership not found or no invoices
        '500':
          description: Internal Server Error
  /mvd.mvd.v2.api.get_annual_invoice_pdf:
    get:
      summary: Get Annual Invoice PDF
      description: Returns a PDF of the specified annual invoice.
      produces:
        - application/pdf
      parameters:
        - name: invoice_name
          in: query
          description: Invoice name (e.g., R-1234567)
          required: true
          type: string
          x-example: R-1234567
        - name: signature
          in: query
          description: Signature hash used for validation
          required: false
          type: string
          x-example: a9e0f81e1c9f486a9cc3e3b8fa6bc0a7
      responses:
        '200':
          description: PDF file returned successfully
          schema:
            type: file
        '400':
          description: Missing or invalid parameters
        '500':
          description: Internal Server Error
  /mvd.mvd.v2.api.get_mvd_shop_all_items:
    get:
      summary: Get All Shop Items
      description: Retrieves a list of all enabled shop items, including item metadata, prices, and member-specific rates (if available).
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              type: object
              properties:
                item_code:
                  type: string
                  example: MVAG-MG
                sektion_id:
                  type: string
                  example: MVAG
                item_name:
                  type: string
                  example: Mitgliedschaft Gesch채ft
                item_group:
                  type: string
                  example: Vereinsmitgliedschaft
                description:
                  type: string
                  nullable: true
                  example: null
                show_in_website:
                  type: boolean
                  description: 0 or 1
                rate:
                  type: number
                  format: float
                  example: 70.50
                member_rate:
                  type: number
                  format: float
                  nullable: true
                  example: null
                image:
                  type: string
                  nullable: true
                  example: null
        '500':
          description: Internal Server Error
  /mvd.mvd.v2.webhook.payrexx_webhook:
    post:
      summary: Payrexx Webhook
      description: |
        Webhook endpoint to receive and process payment notifications from Payrexx.
        This endpoint is public but requires:
        
        - A valid `token` in the **query string**
        - A request coming from an IP address listed in the `Payrexx IP` table
        
        The payload is forwarded internally for processing.
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - name: token
          in: query
          description: Webhook token (must match value in "MVD Settings")
          required: true
          type: string
          x-example: abc123securetoken
        - name: payload
          in: body
          description: Payload from Payrexx (arbitrary key-value structure)
          required: true
          schema:
            type: object
            additionalProperties: true
      responses:
        '200':
          description: Webhook processed successfully
        '401':
          description: Unauthorized (invalid token or IP address)
        '400':
          description: Invalid request or payload
        '500':
          description: Internal Server Error
  /mvd.mvd.v2.api.kampagne:
    post:
      summary: Create or Update Kampagne
      description: |
        Dieser Endpunkt ist f체r Formulare in Kampagnenseiten, insb. f체r Emarsys Newsletter-Anmeldungen und Trigger.
        
        Bei der Neuanlage wird 체ber die Service-Plattform ein Emarsys Update gemacht!
        
        - If `id` is provided and matches an existing document, that document is updated.
        - If `id` is not provided or doesn't exist, a new document is created.
        
        All other fields are treated as dynamic input and are passed directly to the document.
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              id:
                type: string
                description: "Unique 10-character hash identifier, auto-generated if not provided"
                example: "a1b2c3d4e5"
              email:
                type: string
                format: email
                description: "Email address of the campaign subscriber"
                example: "user@example.com"
              newsletter_names:
                type: string
                description: |
                  Comma-separated list of newsletter names the user is subscribing to.
                  Input can be provided as:
                  - JSON array string: '["newsletter1", "newsletter2"]'
                  - Comma-separated string: "newsletter1, newsletter2"
                  - List object (internally converted to comma-separated)
                  Automatically normalized to remove spaces and clean formatting.
                example: "weekly_digest,monthly_updates,special_offers"
              
              mitglied_hash:
                type: string
                description: "Hash identifier for existing members, used for member association"
                example: "xyz789abc"
              zip_code:
                type: string
                description: "Postal/ZIP code of the subscriber, used for member matching and segmentation"
                example: "1234"
              campaign_trigger_code:
                type: string
                description: "Code that triggered this campaign subscription (e.g., source campaign, form ID)"
                example: "SUMMER2024"
              subscribed_over_pledge:
                type: integer
                enum: [0, 1]
                description: "Flag indicating if subscription was made through a pledge/commitment (0=No, 1=Yes)"
                default: 0
              last_name:
                type: string
                description: "Subscriber's last name"
                example: "Doe"
              first_name:
                type: string
                description: "Subscriber's first name"
                example: "John"
              anrede:
                type: string
                description: "Salutation/form of address (Herr, Frau, Keines von beiden)"
                example: "Herr"
              lang_code:
                type: string
                description: "Language code: either de, fr or it"
                default: "de"
                example: "de"
              nl_abo:
                type: integer
                enum: [0, 1]
                description: "Newsletter subscription status (0=Not subscribed, 1=Subscribed)"
                default: 0  
              quelle:
                type: string
                description: "Source/origin of the subscription (tracking where the user came from)"
                example: "https://kampagenseite1.mieterverband.ch/formular1"
              mitglied:
                type: string
                description: "Member ID assigned after successful member association (heuristically populated: e-mail)"
                readOnly: true
              sektion_id:
                type: string
                description: "Section/division ID assigned based on member location or organization structure (heuristically populated, mitglied_id above, plz)"
                readOnly: true
      responses:
        '200':
          description: Kampagne created or updated successfully
          schema:
            type: object
            properties:
              data:
                type: object
                description: The created or updated Kampagne document
        '400':
          description: Missing or invalid parameters
        '500':
          description: Internal Server Error
  /mvd.mvd.v2.api.create_beratung:
    post:
      summary: Create Beratung
      description: |
        Dieser Endpunkt dient der Website zur Anlage einer neuen Beratung.
        
        Zur Beratung zugeh철rige Files m체ssen nachgelagert einzeln an den entsprechenden Endpunkt `upload_file_to_beratung` gesendet werden.

        Example CURL Request:
        ```
        curl --location --request POST 'https://[URL]/api/method/mvd.mvd.v2.api.create_beratung' \
        --header 'Authorization: token [API-Key]:[API-Secret]' \
        --header 'Content-Type: application/json' \
        --data-raw '{
            "mitglied_id": 1234567,
            "topic": "Mietzinssenkung",
            "question": "Hallo zusammen<br>meine Frage ist ...."
        }'
        ```
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            type: object
            required:
              - mitglied_id
              - topic
              - question
            properties:
              mitglied_id:
                type: string
                description: "Unique member identifier (not MVXXXXXXX)"
                example: "1234567"
              topic:
                type: string
                description: "One of `anderes`, `Mietzinserh철hung`, `Mietzinssenkung`, `Heiz- und Nebenkosten`"
                example: "Mietzinssenkung"
                default: anderes
              question:
                type: string
                description: "HTML as string"
                example: "Hallo zusammen<br>meine Frage ist ...."
              make_appointment:
                type: integer
                description: "Has an impact on the status of the consultation. If this flag is set, the consultation status becomes 'Follow-up: Schedule appointment'; otherwise, the consultation status is 'Received.'"
                example: 0
                default: 0
              phone:
                type: string
                description: "Phonenumber"
                example: "055 246 49 36"
              email:
                type: string
                description: "E-Mail-Address"
                example: "example@mail.ch"
              other_rental_property:
                type: string
                description: "HTML as string, e.g. `Musterstrasse 10<br>1234 Musterhausen`"
                example: "Musterstrasse 10<br>1234 Musterhausen"
              date_rent_notification:
                type: string
                description: "Date as string in dd.mm.YYYY"
                example: "01.08.2025"
      responses:
        '200':
          description: Beratung created successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: "25-08-12-446182"
        '404':
          description: Mitglied nicht gefunden
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Mitglied not found"
        '500':
          description: Internal Server Error
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Error Traceback"
  /mvd.mvd.v2.api.upload_file_to_beratung:
    post:
      summary: Upload file to Beratung
      description: |
        Dieser Endpunkt dient der Website zum upload eines Files zu einer Beratung.

        Example CURL Request:
        ```
        curl https://[URL]/api/method/mvd.mvd.v2.api.upload_file_to_beratung \
        --header 'Authorization: token [API-Key]:[API-Secret]' \
        -F "file=@testbild.png" \
        -F "beratung=25-08-12-446182"
        ```
      consumes:
        - multipart/form-data
      parameters:
      - name: file
        in: formData
        type: file
        description: "The file to upload (allowed types: 'image/png', 'image/jpeg', 'application/pdf')"
        required: true
      - name: beratung
        in: formData
        type: string
        x-example: 25-08-12-446182
        description: "Unique Beratung identifier"
        required: true
      - name: last_file
        in: formData
        type: integer
        enum: [0, 1]
        description: |
          Trigger for sending to the ServicePlatform (1 = send to SP)

          It is important to `mark the last file with 1` so that the consultation, including all files, can be sent to the SP.
        required: true
      responses:
        '200':
          description: File saved successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: "File saved"
        '409':
          description: Duplicate Entry Error
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Same file has already been attached to the record"
        '500':
          description: Internal Server Error
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Error Traceback"
securityDefinitions:
  tokenAuth:
    type: apiKey
    name: Authorization
    in: header
    description: Enter your token in the format **token {api_key}:{api_secret}**
security:
  - tokenAuth: []
